"use client";
import { type z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm, Controller } from "react-hook-form";
import Image from "next/image";

import { AddVulnerabilitiesSchema } from "types/schema";
import { Input } from "../Input";
import { Label } from "../label";
import { cn } from "lib/utils";
import { Textarea } from "../textarea";
import Button from "../button";

export default function AddVulnerabilityForm() {
  const {
    handleSubmit,
    formState: { errors },
    register,
    control,
    watch,
  } = useForm<z.infer<typeof AddVulnerabilitiesSchema>>({
    resolver: zodResolver(AddVulnerabilitiesSchema),
    defaultValues: {
      title: "",
      severity: "Critical",
      description: "",
      recomandation: "",
      permalink:
        "https://github.com/thedefibuilder/hackathon-chainlink/blob/6fef63d496f007bf4d9e977f34d2a39a694dbea2/app/src/env.js#L10-L23",
    },
  });

  const onSubmit = (data: z.infer<typeof AddVulnerabilitiesSchema>) => {
    console.log(data);
  };
  console.log(watch(), errors);
  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div className="flex w-full items-center gap-2 text-white">
        <div className="w-1/2">
          <Input
            type="text"
            placeholder="Title"
            {...register("title")}
            className="w-full "
          />
          {errors.title && (
            <p className="!text-s mt-[2px] text-error-500">
              {errors.title.message}
            </p>
          )}
        </div>
        <div className="w-1/2 text-white">
          <div className="h-2" />
          <Controller
            control={control}
            name="severity"
            render={({ field }) => (
              <>
                <div className="flex items-center gap-2">
                  {["Critical", "High", "Medium", "Low"].map((severity) => (
                    <div key={severity} className="relative">
                      <input
                        type="radio"
                        value={severity}
                        id={severity.toLowerCase()}
                        checked={field.value === severity}
                        onChange={() => field.onChange(severity)}
                        className="hidden"
                      />
                      <Label
                        htmlFor={severity.toLowerCase()}
                        className={cn([
                          "flex h-[30px] w-[72px] cursor-pointer items-center justify-center rounded-full font-black",
                          severity === "Critical"
                            ? "bg-primary-red text-primary-redBold"
                            : "",
                          severity === "High"
                            ? "bg-primary-yellow text-primary-yellowBold"
                            : "",
                          severity === "Medium"
                            ? "bg-primary-orange text-primary-orangeBold"
                            : "",
                          severity === "Low"
                            ? "bg-primary-greenMedium text-primary-greenBold"
                            : "",
                          field.value === severity
                            ? "h-10 w-[80px] border-2 "
                            : "",
                        ])}
                      >
                        {severity}
                      </Label>
                    </div>
                  ))}
                </div>
                {errors.severity && (
                  <p className="!text-s mt-[2px] text-error-500">
                    The severity is required
                  </p>
                )}
              </>
            )}
          />
        </div>
      </div>
      <div className="h-4" />
      <Textarea
        placeholder="Add description here:"
        {...register("description")}
        className="w-full"
      />
      {errors.description && (
        <p className="!text-s mt-[2px] text-error-500">
          {errors.description.message}
        </p>
      )}
      <div className="h-4" />
      <Input
        type="text"
        placeholder="https://github.com/thedefibuilder/hackathon-chainlink/blob/6fef63d496f007bf4d9e977f34d2a39a694dbea2/app/src/env.js#L10-L23"
        {...register("permalink")}
        className="w-full text-primary-purpleMedium"
        value="https://github.com/thedefibuilder/hackathon-chainlink/blob/6fef63d496f007bf4d9e977f34d2a39a694dbea2/app/src/env.js#L10-L23"
      />
      {errors.permalink && (
        <p className="!text-s mt-[2px] text-error-500">
          {errors.permalink.message}
        </p>
      )}
      <div className="h-4" />
      <Textarea
        placeholder="Add recommendation here:"
        {...register("recomandation")}
        className="w-full"
      />
      {errors.recomandation && (
        <p className="!text-s mt-[2px] text-error-500">
          {errors.recomandation.message}
        </p>
      )}
      <div className="h-4" />
      <div className="flex w-full justify-end">
        <Button
          className="inline-flex items-center gap-2 rounded bg-primary-green px-2 py-1 font-bold text-black"
          type="submit"
        >
          <Image
            src="/code_blocks_black.svg"
            alt="Code Block Icon"
            width={16}
            height={16}
            className="h-4 w-4"
          />
          Review code
        </Button>
      </div>
      <div className="h-4" />
    </form>
  );
}
