generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditRequest {
  id Int @id @default(autoincrement())

  repoOwner    String
  repoName     String
  filesInScope String[]

  title      String
  tags       String[]
  categories String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  auditResponse AuditResponse?

  @@index([title])
}

model AuditResponse {
  tokenId         Int?            @unique
  vulnerabilities Vulnerability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditRequest   AuditRequest @relation(fields: [auditRequestId], references: [id])
  auditRequestId Int          @unique
}

model Vulnerability {
  id              Int    @id @default(autoincrement())
  filePath        String
  title           String
  description     String
  severity        String
  recommendation  String
  certainityScore Int // 0-100

  AuditResponse   AuditResponse? @relation(fields: [auditResponseId], references: [auditRequestId])
  auditResponseId Int?
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         AuditRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
